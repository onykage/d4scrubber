"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItemAffixDescription = exports.getItemAffixName = exports.getItemSocketTypeText = exports.getItemTypeText = exports.getItemQualityText = exports.getItemVariantText = exports.getItemTypeLine = exports.getItemName = void 0;
const index_js_1 = require("./../types/index.js");
function getItemName(id, language, items) {
    return items[language][id];
}
exports.getItemName = getItemName;
function getItemTypeLine(itemVariant, itemQuality, itemType, language, translations) {
    let format = '{VARIANT} {QUALITY} {TYPE}';
    switch (language) {
        case index_js_1.Language.German:
        case index_js_1.Language.Polish:
        case index_js_1.Language.Russian:
        case index_js_1.Language.Turkish:
            format = '{VARIANT} {TYPE}';
            break;
        case index_js_1.Language.Mexican:
        case index_js_1.Language.Italian:
        case index_js_1.Language.French:
            format = '{TYPE} {VARIANT}';
            break;
        case index_js_1.Language.Spanish:
        case index_js_1.Language.Portuguese:
            format = '{TYPE} {QUALITY}';
            break;
        case index_js_1.Language.Japanese:
        case index_js_1.Language.SimplifiedChinese:
        case index_js_1.Language.TraditionalChinese:
            format = '{VARIANT}{QUALITY}{TYPE}';
            break;
    }
    return replaceVariables(format, {
        variant: getItemVariantText(itemVariant, language, translations) || '',
        quality: getItemQualityText(itemQuality, language, translations) || '',
        type: getItemTypeText(itemType, language, translations) || '',
    }).trim();
}
exports.getItemTypeLine = getItemTypeLine;
function getItemVariantText(itemVariant, language, translations) {
    return translations[language][`ItemQuality${itemVariant}`];
}
exports.getItemVariantText = getItemVariantText;
function getItemQualityText(itemQuality, language, translations) {
    return translations[language][`ItemQuality${itemQuality}`];
}
exports.getItemQualityText = getItemQualityText;
function getItemTypeText(itemType, language, translations) {
    return translations[language][`ItemType${itemType}`];
}
exports.getItemTypeText = getItemTypeText;
function getItemSocketTypeText(itemSocketType, language, translations) {
    return translations[language][`ItemSocketType${itemSocketType}`];
}
exports.getItemSocketTypeText = getItemSocketTypeText;
function getItemAffixName(affixType, affixId, language, affixes) {
    const definition = affixes.definitions[affixType][affixId];
    if (!definition) {
        return '';
    }
    const name = affixes.names[language][definition.name];
    return name;
}
exports.getItemAffixName = getItemAffixName;
function getItemAffixDescription(affixType, affixId, language, affixes, value = '#') {
    const definition = affixes.definitions[affixType][affixId];
    if (!definition) {
        return '';
    }
    const description = definition.attributes
        .map(attribute => {
        const attributeDescriptionId = `${attribute.id}${isNaN(attribute.param) ? '' : `#${attribute.param}`}`;
        const attributeDescription = affixes.descriptions[language][attributeDescriptionId];
        return executeFormulas(replaceVariables(attributeDescription, { value }), value);
    })
        .join('\r\n');
    return description;
}
exports.getItemAffixDescription = getItemAffixDescription;
function replaceVariables(template, variables) {
    return template
        .replace(/\{([^}]+)\}/g, (_, key) => {
        const value = variables[key.toLocaleLowerCase()];
        return value === undefined ? `{${key}}` : `${value}`;
    });
}
function roundValue(value, decimals) {
    const factor = Math.pow(10, decimals);
    return Math.round(value * factor) / factor;
}
function formatValue(value, format) {
    switch (format) {
        case '~':
            return `${typeof value === 'string' ? value : Math.round(value)}`;
        case '~%':
            return `${typeof value === 'string' ? value : Math.round(value)}%`;
        case '1':
            return `${typeof value === 'string' ? value : value.toFixed(1)}`;
        case '1%x':
            return `${typeof value === 'string' ? value : value.toFixed(1)}%[x]`;
        case '1%':
        case '%1':
            return `${typeof value === 'string' ? value : value.toFixed(1)}%`;
        case '1%+':
            return `+${typeof value === 'string' ? value : value.toFixed(1)}%`;
        case '2':
            return `${typeof value === 'string' ? value : value.toFixed(2)}`;
        case '2%x':
            return `${typeof value === 'string' ? value : value.toFixed(2)}%[x]`;
        case '2%':
        case '%2':
            return `${typeof value === 'string' ? value : value.toFixed(2)}%`;
        case '2%+':
            return `+${typeof value === 'string' ? value : value.toFixed(2)}%`;
        case '%x':
            return `${typeof value === 'string' ? value : roundValue(value, 3)}%[x]`;
        case '%':
            return `${typeof value === 'string' ? value : roundValue(value, 3)}%`;
        case '+%':
        case '%+':
            return `+${typeof value === 'string' ? value : roundValue(value, 3)}%`;
        case '':
            return `${typeof value === 'string' ? value : roundValue(value, 3)}`;
        default:
            console.warn('Unknown format', format);
            return `${typeof value === 'string' ? value : roundValue(value, 3)}`;
    }
}
function executeFormulas(template, value) {
    return template
        .replace(/\[([^\]]+)\]/g, (_, formula) => {
        if (formula === 'x')
            return '[x]';
        let format = '';
        formula
            .replace(/\}/g, '')
            .replace(/\|([^|]+)\|/g, (_, key) => {
            format = key;
            return '';
        });
        return formatValue(value, format);
    });
}
